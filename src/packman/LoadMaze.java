package packman;

public class LoadMaze {
	
	/* 1 = Left Border
	 * 2 = Top Border
	 * 4 = Right Border
	 * 8 = Bottom Border
	 * 16 = Point
	 * 32 = EntreePoint for Player
	 * 64 = EntreePoint for Ghost
	 * 
	 *  private final short base[] = {
		        19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 22,
		        17, 48, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,		// EntreePoint for Player [ 2 : 2 ]
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 80, 20,   // Ghost Entry in [14 : 14]
		        9, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 28
		    };
	 */

	
	
	//Basic
	 private final short leveldata1[] = {
		        19, 26, 26, 26, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 22,
		        21,  3,  2,  6, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        21,  1, 64,  4, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,				// Ghost Entry in [3 : 3]
		        21,  9,  0, 12, 17, 16, 16, 24, 16, 16, 16, 16, 16, 16, 20,
		        17, 18, 16, 18, 16, 16, 20,  0, 17, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 20,  0, 17, 16, 16, 16, 16, 24, 20,
		        25, 16, 16, 16, 24, 24, 28,  0, 25, 24, 24, 16, 20,  0, 21,
		         1, 17, 16, 20,  0,  0,  0,  0,  0,  0,  0, 17, 20,  0, 21,
		         1, 17, 16, 16, 18, 18, 22,  0, 19, 18, 18, 16, 20,  0, 21,
		         1, 17, 16, 16, 16, 16, 20,  0, 17, 16, 16, 16, 20,  0, 21,
		         1, 17, 16, 16, 16, 16, 20,  0, 17, 16, 16, 16, 20,  0, 21,
		         1, 17, 16, 16, 16, 16, 16, 18, 16, 16, 16, 16, 20,  0, 21,
		         1, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 52,  0, 21,				// Player Entry in [13 : 13]
		         1, 25, 24, 24, 24, 24, 24, 24, 24, 24, 16, 16, 16, 18, 20,
		         9,  8,  8,  8,  8,  8,  8,  8,  8,  8, 25, 24, 24, 24, 28
		    };
	 
	 //Old School
	 private final short leveldata2[] = {
		        19, 26, 26, 18, 26, 26, 22,  0, 19, 26, 26, 18, 26, 26, 22,
		        21,  0,  0, 21,  0,  0, 21,  0, 21,  0,  0, 21,  0,  0, 21,
		        17, 18, 18, 20,  0, 19, 24, 26, 24, 22,  0, 17, 18, 18, 20,
		        17, 24, 16, 16, 26, 20,  3,  2,  6, 17, 26, 16, 16, 24, 20,
		        21,  0, 17, 28,  0, 21,  1, 64,  4, 21,  0, 25, 20,  0, 21,     		// Ghost Entry in [8 : 5]
		        21,  0, 21,  0,  0, 21,  9,  0, 12, 21,  0,  0, 21,  0, 21,
		        17, 18, 16, 22,  0, 17, 26, 24, 26, 20,  0, 19, 16, 18, 20,
		        17, 24, 16, 16, 26, 20,  0,  0,  0, 17, 26, 16, 16, 24, 20,
		        21,  0, 17, 20,  0, 17, 18, 58, 18, 20,  0, 17, 20,  0, 21,				// Player Entry in [8 : 8]
		        21,  0, 17, 20,  0, 17, 20,  0, 17, 20,  0, 17, 20,  0, 21,
		        21,  0, 25, 16, 18, 16, 28,  0, 25, 16, 18, 16, 28,  0, 21,
		        21,  0,  0, 17, 24, 20,  0,  0,  0, 17, 24, 20,  0,  0, 21,
		        17, 26, 26, 20,  0, 25, 18, 26, 18, 28,  0, 17, 26, 26, 20,
		        21,  0,  0, 21,  0,  0, 21,  0, 21,  0,  0, 21,  0,  0, 21,
		        25, 26, 26, 24, 26, 26, 28,  0, 25, 26, 26, 24, 26, 26, 28
		    };
	 
	 
	 //Arena
	 private final short leveldata3[] = {
			     3, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  6,
		         5, 51,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  6,  5,				// Player Entry in [2 : 2]
		         5,  1, 19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 22,  4,  5,
		         5,  1, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,  4,  5,
		         5,  1, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,  4,  5,
		         5,  1, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,  4,  5,
		         5,  1, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,  4,  5,
		         5,  1, 17, 16, 16, 16, 16, 80, 16, 16, 16, 16, 20,  4,  5,				// Ghost Entry in [8 : 8]
		         5,  1, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,  4,  5,
		         5,  1, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,  4,  5,
		         5,  1, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,  4,  5,
		         5,  1, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,  4,  5,
		         5,  1, 25, 24, 24, 24, 24, 24, 24, 24, 24, 24, 28,  4,  5,
		         5,  9,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 12,  5,
		         9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 12
		    };
	 
	 
	 private final short test[] = {
		        19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 22,
		        17, 48, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20,
		        17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 80, 20,
		        25, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 28
		    };
	 
	    private final int blocksize = 24;
	    private final int nrofblocks = 15;
	    private final int scrsize = nrofblocks * blocksize;
	
	    
	    public LoadMaze(int numlevel){
	    	
	    	
	    	
	    }
	    
	    public short[] getLevelMaze(int i){
	    	switch(i){
	    	case 1 : return leveldata1;
	    	
	    	case 2 : return leveldata2;
	    	
	    	case 3 : return leveldata3;
	    	
	    	default : return leveldata3;
	    	}
	    }
}
